//LIGANDO GIT E GITHUB

git config --global user.name "meu user"
git config --global user.email "meuemail@gmail.com"

1° - Depois de criar a pasta e um arquivo pelo menos: 
     git init --> cria o repositório na pasta (.git)

2° - git add nome_arquivo.txt --> vai adicionar o arquivo modificado no standing
     git add . --> adiciona todos os arquivos modificados no staging

3° - git commit -m "mensagem pro commit"

4° - criar repositório no github e usar:
     git remote add origin url-repositorio-do-github --> responsável por fazer a 
     conexão do repositorio local (minha máquina) com o remoto (github).
    
5° - git push origin master --> carrega o commit pro repositorio do github.
     git push --> uso diário.

//CLONAR

git clone url-repositorio-do-github --> primeiro crio uma pasta, depois dentro 
dela abro o terminal e uso o comando.

git pull --> se foi feita alguma alteração no projeto "oficial" depois de
clonar, para atualizar o projeto que esta na minha máquina, uso esse comando.

//FORKS

git pull request --> depois de fazer um fork do projeto de alguém e uma           fork -> é tipo o clone, só que vai aparecer nos meus
alteração, usando esse comando, posso mandar para o dono a minha alteração        repositórios, não na minha máquina.
pedindo que ele faça o pull no projeto oficial (delea)  
(da pra fazer diretamente pelo github).

//STATUS

git config --global --list

git status

git diff --> mostra as diferenças entre commits, branches, working directory e
staging area, em tempo real, mesmo sem ter usado git add, commit ou push.

git log --> mostra o histórico de commits e outras infos (para voltar ao prompt
basta clicar no "q").

//RESETS

git reset HEAD nome-do-arquivo -->  é usado para remover arquivos do staging 
area, ou seja, para retirá-los da lista de arquivos que serão incluídos no 
próximo commit.

git reset --soft HEAD~1 --> Este comando desfaz o commit mais recente, mas 
mantém as alterações do commit no staging area.

git reset --hard HEAD~1 --> Este comando desfaz o commit mais recente e descarta
todas as alterações associadas a ele. Ele redefine o HEAD para o commit
especificado e também reverte os arquivos do diretório de trabalho para o 
estado em que estavam nesse commit.

//BRANCHES

git checkout -b "nome-da-nova-branch" --> cria uma nova branch e me deixa 
"dentro" dela

git push origin "nome-da-nova-branch" --> push p branchs
    
git checkout master(ou nome-da-branch) --> alternando entre branches
    
git merge nome-da-branch --> junta a branch no main

git branch --> mostra todas as branches do repositório, e add "-a" mostra também
branches remotas

git branch -d nome-branch --> exclui uma branch

git branch -D nome-branch -->  força a exclusão da branch, mesmo que ela 
contenha alterações não mescladas

// OUTROS

mkdir nome_do_diretório --> cria uma pasta

ls --> usado para listar os arquivos e diretórios presentes no diretório atual.
     Usando em conjunto:
     -a: Lista todos os arquivos do diretório, incluindo os arquivos ocultos
     -l: Lista permissões, número de entidades, dono, grupo, tamanho do arquivo, 
     data e hora da última atualização e o nome do arquivo.
     -h: Exibe o tamanho do arquivo em um formato mais compreensível.

echo Texto do arquivo > nome_arquivo.txt --> cria arquivos no powershell

yarn init -y -> cria um projeto node.js com o Yarn, criando um arquivo 
packege.json com valores padrão.

yarn add -D tipo (EX: yarn add -D typescript) --> é usado para adicionar pacotes como dependências de 
desenvolvimento. Isso significa que o pacote será usado apenas durante o 
desenvolvimento e não será incluído quando você implantar ou distribuir seu 
aplicativo.

yarn add express --> Adiciona o pacote Express ao seu projeto Node.js. O Express 
é um framework web para Node.js que facilita a criação de aplicativos web e APIs,
e também simplifica a criação de servidores HTTP e o roteamento de URLs.
